package com.alg.Util;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;/** * 已知: * 小对象(0-1MB)，中对象(1-4.5MB)，大对象(4.5-6MB)，块大小6MB * 数据分布: * 1.全小对象 * 2.小对象50%，中对象40%，大对象10% * 3.全中对象 * 4.小对象10%，中对象50%，大对象40% * * @author Yasin Zhang */public class Generator {    private final RandomUtil randomUtil = new RandomUtil();    private final int smallObjectSizeOrigin = 0 * 1024;    private final int smallObjectSizeBound = 1 * 1024;    private final int mediumObjectSizeOrigin = 1 * 1024;    private final int mediumObjectSizeBound = (int) (4.5 * 1024);    private final int largeObjectSizeOrigin = (int) (4.5 * 1024);    private final int largeObjectSizeBound = 6 * 1024;    private int generateSize;    public Generator() {        this.generateSize = 10000;    }    public Generator(int generateSize) {        this.generateSize = generateSize;    }    public List<Integer> generate(double[] partition) {        double checkpoint1 = partition[0];        double checkpoint2 = checkpoint1 + partition[1];        List<Integer> resultList = new ArrayList<>(generateSize);        int i = 0;        while (i < generateSize) {            double r = randomUtil.nextDouble();            int size;            if (r < checkpoint1) {                size = generateSmallObject();            } else if (r < checkpoint2) {                size = generateMediumObject();            } else {                size = generateLargeObject();            }            if (size != 0) {                resultList.add(size);                i++;            }        }        return resultList;    }    private Integer generateSmallObject() {        return randomUtil.nextInt(smallObjectSizeOrigin, smallObjectSizeBound);    }    private Integer generateMediumObject() {        return randomUtil.nextInt(mediumObjectSizeOrigin, mediumObjectSizeBound);    }    private Integer generateLargeObject() {        return randomUtil.nextInt(largeObjectSizeOrigin, largeObjectSizeBound);    }    /**     * 输出到文件     */    public void outputToFile(List<Integer> sizeList, final String fileName) {        try (            PrintWriter out = new PrintWriter(                    new File(fileName).getAbsoluteFile())        ) {            out.println(generateSize);            for (Integer size : sizeList) {                out.printf("%d\r\n", size);            }        } catch (IOException e) {            System.out.println("输出文件失败");        }    }    double[] partition1 = {1, 0, 0};    double[] partition2 = {0.5, 0.4, 0.1};    double[] partition3 = {0, 1, 0};    double[] partition4 = {0.1, 0.5, 0.4};    public static void main(String[] args) {        for (int i = 10000; i <= 90000; i+= 10000) {            Generator generator = new Generator(i);            generator.outputToFile(generator.generate(generator.partition1), "src/main/resources/testFiles/" + i + "/test1_" + i + ".txt");            generator.outputToFile(generator.generate(generator.partition2), "src/main/resources/testFiles/" + i + "/test2_" + i + ".txt");            generator.outputToFile(generator.generate(generator.partition3), "src/main/resources/testFiles/" + i + "/test3_" + i + ".txt");            generator.outputToFile(generator.generate(generator.partition4), "src/main/resources/testFiles/" + i + "/test4_" + i + ".txt");        }        int i = 99999;        Generator generator = new Generator(i);        generator.outputToFile(generator.generate(generator.partition1), "src/main/resources/testFiles/" + i + "/test1_" + i + ".txt");        generator.outputToFile(generator.generate(generator.partition2), "src/main/resources/testFiles/" + i + "/test2_" + i + ".txt");        generator.outputToFile(generator.generate(generator.partition3), "src/main/resources/testFiles/" + i + "/test3_" + i + ".txt");        generator.outputToFile(generator.generate(generator.partition4), "src/main/resources/testFiles/" + i + "/test4_" + i + ".txt");    }}